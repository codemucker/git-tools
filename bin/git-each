#!/usr/bin/env tm-env-bash
#
# Run a git command on all child repos
#

_include .git.sh @tm/lib.args.sh

declare -A args
# Using --opts-* to capture the command and its arguments after '--'
_parse_args \
    --file "${BASH_SOURCE[0]}" \
    --opt-command "|remainder|multi|short=c|long=command|default=pwd|value=COMMAND|desc=The command (with args) to run.|example='git status --short', 'git add .'" \
    --opt-parallel "|short=p|flag|desc=Run in parallel. Will wait for all processes to complete" \
    --opt-quiet "|short=q|flag|desc=Don't output the dir name" \
    --opt-dir "|short=d|desc=The directory to start from|default=." \
    --opt-hidden "|short=h|flag|desc=Include hidden directories in search." \
    --result args \
    -- "$@"

[[ "${args[quiet]}" == "1" ]] && level=debug || level=info
[[ "${args[parallel]}" == "1" ]] && parallel=1 || parallel=0

root_dir="${args[dir]}"

declare -A GIT_COMMANDS=(\
    [add]="git add" \
    [amend]='git commit --amend' \
    [ammend]='git commit --amend' \
    [checkout]="git checkout" \
    [commit]="git commit" \
    [config]="git config" \
    [diff]="git diff" \
    [log]="git log" \
    [push]="git push" \
    [restore]="git restore" \
    [save]="git-save" \
    [show]="git show" \
    [status]="git status" \
)
DEFAULT_CMD="pwd"
first_command="$(echo "${args['command']:-$DEFAULT_CMD}" | cut -d ' ' -f1)"
first_command_args="$(echo "${args['command']}" | cut -d ' ' -f2-)" 

git_command="${GIT_COMMANDS["$first_command"]:-}"

[[ -n "$git_command" ]] && command="$git_command $first_command_args" || command="${args['command']:-$DEFAULT_CMD}"

# common ignore dirs
IGNORE_DIRS=(
    "node_modules"
    "build"
    "dist"
    "__pycache__"
    "venv"
    "env"
    "coverage"
)

run_command_in_git_dir() {
    local project_dir="$1"
    _pushd "$project_dir"
        _log $level "in $PWD =>"
        if git rev-parse --is-inside-work-tree &>/dev/null; then
            if [[ $parallel == 1 ]]; then
                ( eval "$command" ) &
            else
                ( eval "$command" || true )
            fi
        fi
    _popd
}

# Always process the root directory itself, even if hidden
if [[ -d "${root_dir}/.git" ]]; then
    run_command_in_git_dir "${root_dir}"
fi

# Find git repos in subdirectories.
# We list the contents of the root_dir and pass them to find. This avoids
# the problem of `find` pruning the root_dir itself if it's hidden.
shopt -s nullglob
declare -a find_paths=("${root_dir}"/* "${root_dir}"/.[!.]* "${root_dir}"/..?*)
shopt -u nullglob

if [[ ${#find_paths[@]} -gt 0 ]]; then
    declare -a search_dirs
    for path in "${find_paths[@]}"; do
        [[ -d "$path" ]] && search_dirs+=("$path")
    done

    if [[ ${#search_dirs[@]} -gt 0 ]]; then
        declare -a find_cmd
        find_cmd=(find "${search_dirs[@]}" -type d)

        declare -a prune_expr
        # Conditionally add pruning for hidden directories
        if [[ "${args[hidden]}" != "1" ]]; then
            # Prune hidden directories, but not .git itself
            prune_expr+=(-name '.*' -a -not -name '.git')
        fi

        # Add other ignored directories to prune conditions
        for dir in "${IGNORE_DIRS[@]}"; do
            if [[ ${#prune_expr[@]} -gt 0 ]]; then
                prune_expr+=(-o)
            fi
            prune_expr+=(-name "$dir")
        done

        if [[ ${#prune_expr[@]} -gt 0 ]]; then
            find_cmd+=('(')
            find_cmd+=("${prune_expr[@]}")
            find_cmd+=(')')
            find_cmd+=(-prune -o)
        fi

        find_cmd+=(-name ".git" -print0)

        # Execute the find command and process the results
        # We redirect stderr to /dev/null to suppress "Permission denied" errors
        # for directories we can't read.
        "${find_cmd[@]}" 2>/dev/null | while IFS= read -r -d $'\0' git_dir; do
            run_command_in_git_dir "$(dirname "$git_dir")"
        done
    fi
fi


if [[ $parallel == 1 ]]; then # wait for all background jobs to finish
    _info "waiting for parallel jobs to complete..."
    wait
    _info "..complete"
fi